#include<iostream>
using namespace std;
int Leap(int year)
{
    if(((year%4== 0)&&((year%100)!=0))||year%400==0) return 1;
    else return 0;
}
class DateType
{
private:
    int y,m,d;
public:
       DateType(int y0=1, int m0=1, int d0=1);
       //构造函数，设定年、月、日；并设置参数默认值
       void IncrementDay(); //增加 1 天
       bool Equal(DateType dt2); //判断二日期是否相等
       void PrintDate(); //屏幕输出日期对象的有关数据（年、月、日）
};
DateType::DateType(int y0, int m0, int d0):y(y0),m(m0),d(d0){}
void DateType::IncrementDay()
{
    int day[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};
    if(Leap(y)) day[2]++;
    if(d==day[m])
    {
        d=1;
        m++;
    }
    else d++;
    if(m==13)
    {
        m=1;
        y++;
    }
}
bool DateType::Equal(DateType dt2)
{
    if(y==dt2.y && m==dt2.m && d==dt2.d) return true;
    else return false;
}
void DateType::PrintDate()
{
    cout<<y<<":"<<m<<":"<<d<<endl;
}
int main()
{
    int y1,m1,d1,y2,m2,d2;
    cin>>y1>>m1>>d1>>y2>>m2>>d2;
    DateType dt1(y1,m1,d1),dt2(y2,m2,d2);
    dt1.PrintDate();
    dt2.PrintDate();
    if(dt1.Equal(dt2)) cout<<"True"<<endl;
    else cout<<"False"<<endl;
    dt1.IncrementDay();
    dt2.IncrementDay();
    dt1.PrintDate();
    dt2.PrintDate();
    return 0;
}
